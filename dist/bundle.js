var a=class s{static DEFAULT_TTL=60*10;static MAX_ALLOWED_KEYS=100;static MAX_KEY_LENGTH=10;static MAX_VALUE_LENGTH=1e3;static DEFAULT_CLEANUP_INTERVAL=5;static DEFAULT_PERSIST_KEY="@tacs/cache";static persistedObject=localStorage;storage=new Map;flushInterval;flushOnGet;maxAllowedKeys;maxKeyLength;maxValueLength;constructor(e){if(this.maxAllowedKeys=e?.maxAllowedKeys??s.MAX_ALLOWED_KEYS,this.maxKeyLength=e?.maxKeyLength??s.MAX_KEY_LENGTH,this.maxValueLength=e?.maxValueLength??s.MAX_VALUE_LENGTH,this.flushOnGet=!!e?.flushOnGet,this.flushInterval=setInterval(()=>{this.storage.keys().forEach(t=>{this.isFlushable(t)&&this.flush(t)})},(e?.flushInterval??s.DEFAULT_CLEANUP_INTERVAL)*1e3),e?.preloadKey){let t=typeof e.preloadKey=="boolean"?s.DEFAULT_PERSIST_KEY:e.preloadKey,r=s.persistedObject.getItem(t);if(!r)throw new Error(`No preload data was found in ${t}`);this.storage=new Map(JSON.parse(r))}}isFlushable(e){let t=this.storage.get(e);return t?new Date().getTime()>=t.deleteAt:!1}get(e){if(this.storage.has(e)){if(this.flushOnGet&&this.isFlushable(e)){this.flush(e);return}return this.storage.get(e).value}}set(e,t,r){if(e.length>this.maxKeyLength)throw new Error(`The key must be a string with a maximum of ${this.maxKeyLength} characters`);if(t.length>this.maxValueLength)throw new Error(`The value must be a string with a maximum of ${this.maxValueLength} characters`);if(this.storage.size>=this.maxAllowedKeys)throw new Error("No more keys allowed");if(!(r&&r.replace)&&this.storage.has(e))throw new Error("This key already exists, if you wish to replace, please set the options.replace=true");let h=r?.ttl??s.DEFAULT_TTL;try{this.storage.set(e,{deleteAt:new Date().setSeconds(new Date().getSeconds()+h),value:t})}catch(i){let l=i;throw new Error(`No more memory: ${l.message}`)}}flush(e){this.storage.delete(e)}flushAll(){this.storage.clear()}getAll(){return this.storage}destroy(){clearInterval(this.flushInterval),this.storage=new Map}persist(e){s.persistedObject.setItem(e??s.DEFAULT_PERSIST_KEY,JSON.stringify(this.storage.entries().toArray()))}};export{a as Cache};
